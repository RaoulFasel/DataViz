<!DOCTYPE html>
<meta charset="utf-8">
<style>

.node circle {
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node {
  font: 10px sans-serif;
}

.visual{
    overflow: scroll;
}

.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}
.chart {
  font-family: Arial, sans-serif;
  font-size: 10px;
  
}
.axis path, .axis line {
  fill: none;
  stroke: #000;
  }

</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var timeFormat = d3.time.format("%Y-%m-%d");
var timeFormat2 = d3.time.format("%Y-%m");
var timeFormat3 = d3.time.format("%Y");

var width = 25000,
    height = 700;

var start = 1990, end = 2015;

var xScale = width/(end-start)

var monthScale = xScale/12

var dayScale = xScale/365

var cluster = d3.layout.tree()
    .size([height, width - 160]);

function parseDate(d, mode){
 if(d){

                
                if(d.length<11){
                    var date = timeFormat.parse(d); 
                    }
                if(d.length<8){
                    var date = timeFormat2.parse(d); 
                    }
                if(d.length<5){
                    var date =timeFormat3.parse(d);
                    }  

                if(date){         
                    var loc = (((date.getFullYear()-mode)*xScale)+((date.getMonth()+1)*monthScale)+((date.getDay()*dayScale)));} 

            return loc; }


}

var inheritanceDiagonal = d3.svg.diagonal()
    .source(function(d) { return {"x":parseDate(d.source.start,start),       "y":d.source.x}; })            
    .target(function(d) { return {"x":parseDate(d.target.start,start), "y":d.target.x}; }) 

            
//var diagonal = d3.svg.diagonal()
//    .projection(function(d) { return [d.y, d.x]; });


var svg = d3.select("body").append("svg")
    .attr("class", "visual")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("transform", "translate(40,0)");
 
d3.json("test.json", function(error, root) {
  var nodes = cluster.nodes(root), links = cluster.links(nodes);

  

  var link = svg.selectAll(".link")
      .data(links)
    .enter().append("path")
      .attr("class", "link")
      .attr("d", inheritanceDiagonal);
      
  var node = svg.selectAll(".node")
      .data(nodes)

    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) {  
          return "translate("  + parseDate(d.start,start) + "," + d.x + ")"; })
        

      
      
  node.append("circle")
      .attr("r", 4.5);

  node.append("text")
      .attr("dx", function(d) { return d.children ? -8 : 8; })
      .attr("dy", 4)
      .style("text-anchor", function(d) { return d.children ? "end" : "start"; })
      .text(function(d) { return d.name;});
      
 

    
});       
d3.select(self.frameElement).style("height", height + "px");



//////graph time axis
var margin = {top: 40, right: 40, bottom: 40, left:40}
var axisHeight = 100;
var timeline = d3.select("body").append("svg")
    .attr('class', 'chart')
    .attr("width", width)
    .attr("height", axisHeight)
  .append("g")
    .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');


var x = d3.time.scale()
    .domain([new Date(start+"-01-01"), d3.time.day.offset(new Date(end+"-01-01"), 1)])
    .rangeRound([0, width - margin.left - margin.right]);
    
var xAxis = d3.svg.axis()
    .scale(x)
    .orient('bottom')
    .ticks(d3.time.months, 1)
    .tickFormat(d3.time.format('%b %Y'))
    .tickSize(10)
    .tickPadding(8);





timeline.append('g')
    .attr('class', 'x axis')
    .attr('transform', 'translate(0, ' + (axisHeight - margin.top - margin.bottom) + ')')
    .call(xAxis);
 




</script>
